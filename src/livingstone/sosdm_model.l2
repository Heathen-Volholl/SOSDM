// ==============================
// NASA Livingstone 2 Integration
// File: livingstone/sosdm_model.l2
// ==============================

/*
Livingstone 2 Model for SOSDM Self-Healing System
This defines the system components and their failure modes
*/

// Component definitions
component LLMService {
    modes: { ok, slow, unresponsive, crashed };
    
    transitions: {
        ok -> slow when high_load;
        ok -> unresponsive when memory_exhausted;
        ok -> crashed when segfault;
        slow -> ok when load_normal;
        slow -> unresponsive when timeout;
        unresponsive -> crashed when force_kill;
        crashed -> ok when restart_service;
    };
    
    observable: {
        response_time: continuous;
        memory_usage: continuous;
        cpu_usage: continuous;
        error_rate: continuous;
    };
}

component DatabaseService {
    modes: { ok, slow, locked, corrupted };
    
    transitions: {
        ok -> slow when concurrent_access;
        ok -> locked when transaction_deadlock;
        ok -> corrupted when disk_error;
        slow -> ok when queries_complete;
        locked -> ok when unlock_database;
        corrupted -> ok when restore_backup;
    };
    
    observable: {
        query_time: continuous;
        connection_count: discrete;
        disk_space: continuous;
        integrity_check: boolean;
    };
}

component EmbeddingService {
    modes: { ok, overloaded, model_error, oom };
    
    transitions: {
        ok -> overloaded when batch_size_large;
        ok -> model_error when model_corrupted;
        ok -> oom when memory_limit_exceeded;
        overloaded -> ok when reduce_batch_size;
        model_error -> ok when reload_model;
        oom -> ok when restart_with_more_memory;
    };
    
    observable: {
        processing_rate: continuous;
        queue_length: discrete;
        memory_pressure: continuous;
        model_accuracy: continuous;
    };
}

// System-level monitoring
system SOSDM {
    components: { LLMService, DatabaseService, EmbeddingService };
    
    // Global health assessment
    constraint system_healthy:
        LLMService.mode == ok AND 
        DatabaseService.mode == ok AND 
        EmbeddingService.mode == ok;
    
    // Recovery procedures
    recovery restart_llm:
        when LLMService.mode == crashed
        do { restart_service(LLMService); };
    
    recovery reduce_load:
        when LLMService.mode == slow AND DatabaseService.mode == slow
        do { throttle_requests(50%); };
    
    recovery failover_embedding:
        when EmbeddingService.mode == oom
        do { switch_to_cpu_embedding(); };
}

// Diagnostic rules
diagnosis memory_exhaustion:
    symptoms: { 
        LLMService.memory_usage > 0.9,
        EmbeddingService.memory_pressure > 0.8,
        system.swap_usage > 0.5
    }
    explanation: "System running low on memory, consider reducing batch sizes or restarting services";

diagnosis disk_issues:
    symptoms: {
        DatabaseService.disk_space < 0.1,
        DatabaseService.query_time > 5.0,
        system.disk_io_wait > 0.3
    }
    explanation: "Disk performance issues detected, check disk space and I/O load";

diagnosis model_degradation:
    symptoms: {
        EmbeddingService.model_accuracy < 0.7,
        LLMService.response_quality < 0.6
    }
    explanation: "Model performance degraded, consider retraining or switching models";